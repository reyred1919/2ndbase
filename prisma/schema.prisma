
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- NextAuth.js Models ---
// These are required for the Prisma adapter to work.

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// --- Custom Application Models ---

model User {
  id              String      @id @default(cuid())
  name            String?
  username        String      @unique
  email           String?     @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  accounts        Account[]
  sessions        Session[]
  ownedTeams      Team[]      @relation("TeamOwner")
  memberships     TeamMembership[]
  ownedCycles     OkrCycle[]
  activeCycle     ActiveOkrCycle?
  calendarSettings CalendarSettings?
  createdInvitationLinks TeamInvitationLink[]
}

enum Role {
  admin
  member
}

model Team {
  id            Int            @id @default(autoincrement())
  name          String
  ownerId       String
  owner         User           @relation("TeamOwner", fields: [ownerId], references: [id])
  memberships   TeamMembership[]
  members       Member[]
  objectives    Objective[]
  invitationLink TeamInvitationLink?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model TeamMembership {
  teamId  Int
  userId  String
  role    Role
  team    Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignedAt DateTime @default(now())

  @@id([teamId, userId])
}

model TeamInvitationLink {
  id          Int      @id @default(autoincrement())
  link        String   @unique
  teamId      Int      @unique
  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  creatorId   String
  creator     User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  expiresAt   DateTime?
}

model Member {
  id        Int      @id @default(autoincrement())
  name      String
  avatarUrl String?
  teamId    Int
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  keyResultAssignments KeyResultAssignee[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OkrCycle {
  id        Int       @id @default(autoincrement())
  name      String
  startDate DateTime
  endDate   DateTime
  ownerId   String
  owner     User      @relation(fields: [ownerId], references: [id])
  objectives Objective[]
  activeForUsers ActiveOkrCycle[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model ActiveOkrCycle {
  userId  String    @id
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  cycleId Int
  cycle   OkrCycle  @relation(fields: [cycleId], references: [id], onDelete: Cascade)
}

model Objective {
  id          Int         @id @default(autoincrement())
  description String      @db.Text
  teamId      Int
  team        Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  cycleId     Int
  cycle       OkrCycle    @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  keyResults  KeyResult[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum ConfidenceLevel {
  HIGH
  MEDIUM
  LOW
  AT_RISK
}

model KeyResult {
  id              Int       @id @default(autoincrement())
  description     String    @db.Text
  progress        Int       @default(0)
  confidenceLevel ConfidenceLevel @default(MEDIUM)
  objectiveId     Int
  objective       Objective @relation(fields: [objectiveId], references: [id], onDelete: Cascade)
  initiatives     Initiative[]
  risks           Risk[]
  assignees       KeyResultAssignee[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model KeyResultAssignee {
  keyResultId Int
  memberId    Int
  keyResult   KeyResult @relation(fields: [keyResultId], references: [id], onDelete: Cascade)
  member      Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  
  @@id([keyResultId, memberId])
}

enum InitiativeStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  BLOCKED
}

model Initiative {
  id          Int            @id @default(autoincrement())
  description String         @db.Text
  status      InitiativeStatus @default(NOT_STARTED)
  keyResultId Int
  keyResult   KeyResult      @relation(fields: [keyResultId], references: [id], onDelete: Cascade)
  tasks       Task[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model Task {
  id          Int        @id @default(autoincrement())
  description String     @db.Text
  completed   Boolean    @default(false)
  initiativeId Int
  initiative  Initiative @relation(fields: [initiativeId], references: [id], onDelete: Cascade)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

enum RiskStatus {
  ACTIVE
  UNDER_REVIEW
  RESOLVED
}

model Risk {
  id              Int        @id @default(autoincrement())
  description     String     @db.Text
  correctiveAction String    @db.Text
  status          RiskStatus @default(ACTIVE)
  keyResultId     Int
  keyResult       KeyResult  @relation(fields: [keyResultId], references: [id], onDelete: Cascade)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model CalendarSettings {
  userId            String    @id
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  frequency         String
  checkInDayOfWeek  Int
  evaluationDate    DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}
